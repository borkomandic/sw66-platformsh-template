# This file describes an application. You can have multiple applications
# in the same project.

# The name of this app. Must be unique within a project.
name: app

# The type of the application to build.
type: 'php:8.3'
build:
  flavor: composer

dependencies:
  php:
    composer/composer: '^2.7'
variables:
  env:
    NVM_VERSION: v0.39.0
    # Using /src subfolder for all SW related stuff
    SW_APP_DIR: /app/src

runtime:
  extensions:
    - ctype
    - dom
    - iconv
    - mbstring
    - fileinfo
    - intl
    - redis
    - sodium
    - amqp

# The hooks that will be performed when the package is deployed.
hooks:
  build: |
    set -e
    cd $SW_APP_DIR
    
    echo "==================================================="
    echo "UPDATING COMPOSER DEPENDENCIES"
    echo "==================================================="
    composer update --no-dev --optimize-autoloader
    
    echo "==================================================="
    echo "START BUILD SCRIPT"
    echo "Beginning with the NVM and NodeJS setup"
    echo "==================================================="
    # install nvm
    unset NPM_CONFIG_PREFIX
    [ ! -d "$SW_APP_DIR/.nvm" ] && mkdir "$SW_APP_DIR/.nvm"
    export NVM_DIR="$SW_APP_DIR/.nvm"

    # install.sh will automatically install NodeJS based on the presence of $NODE_VERSION
    curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/$NVM_VERSION/install.sh | bash
    echo " >>>>>>> nvm.sh operations... <<<<<<<"
    [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"

    # have nvm available and load the correct node version in your ssh session
    echo 'unset NPM_CONFIG_PREFIX' >> ~/.bash_profile
    echo 'export NO_UPDATE_NOTIFIER=1' >> ~/.bash_profile
    echo 'export NVM_DIR="$PLATFORM_APP_DIR/.nvm"' >> ~/.bash_profile
    echo '[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"' >> ~/.bash_profile

    echo "==================================================="
    echo "REMOVE FASTLY WHEN NOT A PRODUCTION OR STAGE ENV"
    echo "==================================================="
    echo "The Environment has the following type: $PROJECT_ENVIRONMENT_TYPE"
    if [ "$PROJECT_ENVIRONMENT_TYPE" = development ]; then
        echo "remove fastly.yaml on environment type development"
        rm -f config/packages/fastly.yaml
    fi
    echo "Fastly setup step done"
    
    echo "==================================================="
    echo "CREATING PLATFORM TMP FILES & SYMBOLIC LINKS"
    echo "Runtime editable files will have symlinks to"
    echo "sources in var/platformsh_tmp/ dir"
    echo "==================================================="
    # Ensure that var/platformsh_tmp dir is created
    mkdir -p var/platformsh_tmp
    
    # Handling real .bash_profile file (source of symlink)
    if [ -f ~/.bash_profile ]; then
      # If .bash_profile exists, move it.
      mv ~/.bash_profile var/platformsh_tmp/.bash_profile
    else
      # If .bash_profile does not exist, create it.
      touch var/platformsh_tmp/.bash_profile
    fi
    # Create a symlink to the .bash_profile file in home root
    ln -sfn $SW_APP_DIR/var/platformsh_tmp/.bash_profile ~/.bash_profile
    
    # Handling real .env file (source of symlink)
    touch var/platformsh_tmp/.env
    # Create a symlink to the .env file at the project root
    ln -sfn var/platformsh_tmp/.env .env
  deploy: |
    set -e
    cd $SW_APP_DIR
    
    echo "==================================================="
    echo "REPLICATING PLATFORM PROJECT BRANCH VARS TO .ENV"
    echo "==================================================="
    "$PLATFORM_APP_DIR/devops/platformsh/platformsh-setenv.sh"
    
    php -r 'include("'"$SW_APP_DIR"'/.env.local.php"); foreach ($outputArr as $key => $value) { echo "$key=$value\n"; }' | while IFS='=' read -r key value; do
      echo "export $key='$value'" >> ~/.bash_profile
    done
    
    export $(grep -v '^#' .env | xargs)
    # source ~/.bash_profile
    
    echo "==================================================="
    echo "MODIFYING SALES CHANNEL DOMAIN TO THE CURRENT ENV"
    echo "==================================================="
    # The following line is commented due to SW6 command bug, with specific versions of PHP/MARIADB,
    # where en existing domain gets appended with new value, instead of fully replaced. Therefore,
    # we're using sales-channel-domain-modifier.php for this action...
    # bin/console sales-channel:update:domain $(echo "$SHOPWARE_URL" | awk -F/ '{print $3}')
    php "$PLATFORM_APP_DIR/devops/platformsh/sales-channel-domain-modifier.php" $(echo "$SHOPWARE_URL" | awk -F/ '{print $3}')
    
    echo "==================================================="
    echo "BUILDING BASIC SHOPWARE RESOURCES"
    echo "==================================================="
    bin/build-js.sh
    bin/console theme:compile
    bin/console bundle:dump
    bin/console cache:clear
    
    # restore theme config from build to mount in case theme needs rebuilding during runtime
    cp -R build-tmp/theme-config files/

    # restore plugin config to mount
    cp build-plugins.json var/plugins.json

    echo "==================================================="
    echo "INITIALIZE SHOPWARE'S SITE DATA IF NOT ALREADY INSTALLED"
    echo "==================================================="
    # Initialize the Shopware site's data set if it's not already installed.
    # (This is only for demo/first install and can be removed once Shopware is initialized)
    if ! bin/console system:is-installed; then
        # setup the environment
        # create database with a basic setup (admin user and storefront sales channel).
        # this will try to run theme:compile which cannot be disabled, so it will throw a bunch of warnings
        # that can be ignored (we use stateless build anyway, so this is done already at this point)
        echo "Running system:install (Warnings for theme:compile can be ignored)"
        bin/console system:install --create-database --basic-setup --force --no-assign-theme --skip-assets-install
        bin/console theme:change --all Storefront --no-compile
        bin/console theme:dump

        # Disable FRW
        bin/console system:config:set core.frw.completedAt '2019-10-07T10:46:23+00:00'
    fi;

    echo "==================================================="
    echo "RUN MIGRATIONS"
    echo "==================================================="
    # optional: run migration automatically with deploy
    bin/console database:migrate --all # Run Shopware core migrations
    php bin/console plugin:refresh

    list_plugins_not_installed=$(php bin/console plugin:list --json | jq 'map(select(.installedAt == null)) | .[].name' -r)

    for plugin in $list_plugins_not_installed; do
        echo "Installing Plugin $plugin ..."
        php bin/console plugin:install --activate --skip-asset-build $plugin
    done

    list_with_updates=$(php bin/console plugin:list --json | jq 'map(select(.upgradeVersion != null)) | .[].name' -r)

    for plugin in $list_with_updates; do
        echo "Updating Plugin $plugin ..."
        php bin/console plugin:update --skip-asset-build $plugin
    done

    echo "==================================================="
    echo "CLEAR CACHES"
    echo "==================================================="
    # run cache clear commands, on grid environments this should run in the deploy hook,
    # on dedicated generation 2, it will run as part of the pre_start hook (to be set up by Platform.sh support)
    if [ -z "$PLATFORM_REGISTRY_NUMBER" ]; then
        sh bin/prestart_cacheclear.sh
    else
        # on dedicated gen 2, we need to explictly clear the redis cache since redis is not available during pre_start
        bin/console cache:pool:clear cache.object
    fi

    echo "==================================================="
    echo "SETUP FASTLY AND CLEAR OPCACHE"
    echo "==================================================="
    if [ "$PLATFORM_ENVIRONMENT_TYPE" = "production" ] || [ "$PLATFORM_ENVIRONMENT_TYPE" = "stage" ]; then
        if [ -e bin/setup-fastly.sh ]; then
            echo "Running setup-fastly.sh script"
            ./bin/setup-fastly.sh
        else
            echo "setup-fastly.sh script not found"
        fi
    fi

    # Send USR2 signal to php-fpm to clear the opcache
    pkill -f -USR2 -u web php-fpm

# The relationships of the application with services or other applications.
# The left-hand side is the name of the relationship as it will be exposed
# to the application in the PLATFORM_RELATIONSHIPS variable. The right-hand
# side is in the form `<service name>:<endpoint name>`.
relationships:
  maindatabase: "maindb:main"
  stagedatabase: "stagedb:stage"
  rediscache: "cacheredis:redis"
  opensearch: "opensearch:opensearch"

# The size of the persistent disk of the application (in MB).
disk: 1024

# The mounts that will be performed when the package is deployed.
mounts:
  "/src/files":
    source: service
    service: fileshare
    source_path: "src/files"
  "/src/public/media":
    source: service
    service: fileshare
    source_path: "src/public/media"
  "/src/public/thumbnail":
    source: service
    service: fileshare
    source_path: "src/public/thumbnail"
  "/src/public/theme":
    source: service
    service: fileshare
    source_path: "src/public/theme"
  "/src/var":
    source: service
    service: fileshare
    source_path: "src/var"
  "/src/var/platformsh_tmp":
    source: service
    service: fileshare
    source_path: "src/var/platformsh_tmp"
  "/src/config/secrets":
    source: service
    service: fileshare
    source_path: "src/config/secrets"
  "/src/var/cache":
    source: local
    source_path: "src/var/cache"
  "/src/.global":
    source: local
    source_path: "src/.global"
  "/src/.cache":
    source: local
    source_path: "src/.cache"

web:
  locations:
    "/":
      # The public directory of the app, relative to its root.
      root: "src/public"
      # The front-controller script to send non-static requests to.
      passthru: "/index.php"
      expires: 24h
      rules:
        \.(css|js|gif|jpe?g|png|ttf|eot|woff2?|otf|cast|mp4|json|yaml|ico|svg?|cast|mp4|json|yaml|svg?|ttf)$:
          expires: 4w
workers:
  queue:
    disk: 128
    commands:
      start: |
        bin/console cache:clear
        bin/console messenger:consume async,failed --memory-limit=$(cat /run/config.json | jq .info.limits.memory)M --time-limit=295

crons:
  scheduler:
    spec: '*/5 * * * *'
    cmd: 'php bin/console scheduled-task:run --no-wait'